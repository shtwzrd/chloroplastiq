#region

using System.IO;
using Chloroplastiq.Grammar;

#endregion

namespace Chloroplastiq.TurtleGraphics
{
    public class LInterpreter
    {
        public Product LSystem;
        public Turtle Turtle;

        public LInterpreter(Turtle t, Product p, float r)
        {
            Turtle = t;
            LSystem = p;
            Rotation = r;
            Iterations = LSystem.Iterations;
        }

        public float Rotation { get; set; }

        public int Iterations { get; set; }

        public string GetGrammar()
        {
            // if (Iterations > 0)
            //    return LSystem.Yield(LSystem.Axiom, Iterations, LSystem.Rules);
            // else
            //    return "";

            var lastGeneration = Lindenmayer.System.generation(LSystem.Axiom, LSystem.Rules);

            for (var i = 1; i < Iterations; i++)
            {
                lastGeneration = Lindenmayer.System.generation(lastGeneration, LSystem.Rules);
            }
            return lastGeneration;
        }

        // Interpreter method, responsible for reading the Grammar generated by the Product class.
        public void Render()
        {
            var reader = new StringReader(GetGrammar());
            while (true)
            {
                var sentinel = reader.Read();
                if (sentinel == -1) break;
                switch (sentinel)
                {
                    case '|':
                        Turtle.Forward();
                        break;

                    case '+':
                        Turtle.Rotate(-Rotation);
                        break;

                    case '-':
                        Turtle.Rotate(Rotation);
                        break;

                    case '[':
                        Turtle.Push(new Orientation(Turtle.Position, Turtle.Direction));
                        break;

                    case ']':
                        Turtle.Pop();
                        break;

                    case 'F':
                        Turtle.Forward();
                        break;
                }
            }
        }
    }
}