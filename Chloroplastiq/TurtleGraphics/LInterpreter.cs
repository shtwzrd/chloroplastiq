// <summary>
//   The l interpreter.
// </summary>
namespace Chloroplastiq.TurtleGraphics
{
    using System.IO;

    using Chloroplastiq.Grammar;

    using Lindenmayer;

    /// <summary>
    ///     The l interpreter.
    /// </summary>
    public class LInterpreter
    {
        #region Constructors and Destructors

        /// <summary>
        /// Initializes a new instance of the <see cref="LInterpreter"/> class.
        /// </summary>
        /// <param name="t">
        /// The turtle used for drawing the system.
        /// </param>
        /// <param name="p">
        /// The product (grammar) to parse.
        /// </param>
        /// <param name="r">
        /// The rotation, in degrees, to be applied to the turn operators.
        /// </param>
        public LInterpreter(Turtle t, Product p, float r)
        {
            this.Turtle = t;
            this.LSystem = p;
            this.Rotation = r;
            this.Iterations = this.LSystem.Iterations;
        }

        #endregion

        #region Public Properties

        /// <summary>
        ///     Gets or sets the iterations.
        /// </summary>
        public int Iterations { get; set; }

        /// <summary>
        ///     Gets or sets the rotation.
        /// </summary>
        public float Rotation { get; set; }

        /// <summary>
        /// Gets or sets the l system.
        /// </summary>
        public Product LSystem { get; set; }

        /// <summary>
        /// Gets or sets the turtle.
        /// </summary>
        public Turtle Turtle { get; set; }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        ///     The get grammar.
        /// </summary>
        /// <returns>
        ///     The <see cref="string" />.
        /// </returns>
        public string GetGrammar()
        {
            // if (Iterations > 0)
            // return LSystem.Yield(LSystem.Axiom, Iterations, LSystem.Rules);
            // else
            // return "";
            string lastGeneration = System.generation(this.LSystem.Axiom, this.LSystem.Rules);

            for (int i = 1; i < this.Iterations; i++)
            {
                lastGeneration = System.generation(lastGeneration, this.LSystem.Rules);
            }

            return lastGeneration;
        }

        /// <summary>
        /// Interpreter method, responsible for reading the Grammar generated by the Product class.
        /// </summary>
        public void Render()
        {
            var reader = new StringReader(this.GetGrammar());
            while (true)
            {
                int sentinel = reader.Read();
                if (sentinel == -1)
                {
                    break;
                }

                switch (sentinel)
                {
                    case '|':
                        this.Turtle.Forward();
                        break;

                    case '+':
                        this.Turtle.Rotate(-this.Rotation);
                        break;

                    case '-':
                        this.Turtle.Rotate(this.Rotation);
                        break;

                    case '[':
                        this.Turtle.Push(new Orientation(this.Turtle.Position, this.Turtle.Direction));
                        break;

                    case ']':
                        this.Turtle.Pop();
                        break;

                    case 'F':
                        this.Turtle.Forward();
                        break;
                }
            }
        }

        #endregion
    }
}